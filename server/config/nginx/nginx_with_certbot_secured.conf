# Rate limiting zone for excessive requests, 10MBs in cache, 13 rps
limit_req_zone $binary_remote_addr zone=limitreq:10m rate=13r/s;
# Cache 10m for each
limit_conn_zone $binary_remote_addr zone=connlimit:10m;
limit_conn_zone $server_name zone=perserver:10m;

server {
  listen 80;
  listen [::]:80;
  server_name baderidris.com www.baderidris.com;

  server_tokens       off;

  location ~ /.well-known/acme-challenge {
    allow all;
    root /var/www/html;
  }

  location / {
    rewrite ^ https://$host$request_uri? permanent;
  }
}

server {
  listen 80;
  listen [::]:80;
  server_name mail.baderidris.com mta-sts.baderidris.com;

  server_tokens       off;

  location ~ /.well-known/acme-challenge {
    allow all;
    root /var/www/html;
  }

  location =/.well-known/mta-sts.txt {
    root /var/www/html/;
  }

  # Catch-all to prevent 404s on this server block
  location / {
    return 204;
  }
}

server {
  # ! it's important to stay up to date with: OSCP stapling
  listen 443 ssl;
  listen [::]:443 ssl;
  http2 on;
  server_name         baderidris.com www.baderidris.com;

  # hides nginx version
  server_tokens       off;

  ssl_certificate     /etc/letsencrypt/live/baderidris.com/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/baderidris.com/privkey.pem;

  ssl_buffer_size     8k;

  ssl_dhparam         /etc/ssl/certs/dhparam.pem;

  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;

  ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
  # Using sslLabs, these are the only non-supported browsers:
  # Chrome 49 / XP SP3	Server sent fatal alert: handshake_failure
  # Safari 6 / iOS 6.0.1	Server sent fatal alert: handshake_failure
  # Safari 7 / iOS 7.1  R	Server sent fatal alert: handshake_failure
  # Safari 7 / OS X 10.9  R	Server sent fatal alert: handshake_failure
  # Safari 8 / iOS 8.4  R	Server sent fatal alert: handshake_failure
  # Safari 8 / OS X 10.10  R	Server sent fatal alert: handshake_failure

  ssl_ecdh_curve secp384r1;
  ssl_session_tickets off;

  ssl_stapling on;
  ssl_stapling_verify on;
  resolver 8.8.8.8;

  # Security headers
  # ! Don't put them in @app, this is their proper position!
  # ? Check your site at: securityheaders.com
  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-XSS-Protection "1; mode=block" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header Referrer-Policy "no-referrer-when-downgrade" always;
  add_header Content-Security-Policy "default-src 'self' 'unsafe-eval' 'unsafe-inline' http: https: ws: wss: blob: data: capacitor://localhost;  img-src 'self' https://baderidris.com https://*.githubusercontent.com data:;  frame-ancestors 'self';" always;
  add_header Permissions-Policy        "interest-cohort=()" always;

  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
  # enable strict transport security only if you understand the implications
  # check this for more info https://hstspreload.org/

  # assets, media
  location ~* \.(?:css(\.map)?|js(\.map)?|jpe?g|png|gif|ico|cur|heic|webp|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv)$ {
      expires 7d;
  }

  # svg, fonts
  location ~* \.(?:svgz?|ttf|ttc|otf|eot|woff2?)$ {
    add_header Access-Control-Allow-Origin "*";
    expires    7d;
  }

  location / {
    try_files $uri $uri/ @app;
  }

  # TODO: FIX THIS
  # 2025/01/28 15:05:02 [error] 8#8: *65 open() "/usr/share/nginx/html/favicon.ico" failed (2: No such file or directory), client: 65.49.1.30, server: localhost, request: "GET /favicon.ico HTTP/1.1", host: "167.71.184.230"

  # # favicon.ico
  location = /favicon.ico {
    root /var/www/html/;
    log_not_found off;
    # TODO: is this working!!
    gzip off;
  }

  # # robots.txt
  # location = /robots.txt {
  #     log_not_found off;
  # }


  location @app {
    proxy_pass http://app:3000;

    # Apply rate limiting here # 10 beyond the limit before banning with fail2ban after nginx throws 503 error
    limit_conn connlimit 20;
    limit_req zone=limitreq burst=10 nodelay;
    limit_conn perserver 50;
    # limit_req off; # Put in Location to Exempt Specific Queries

    # Useful headers for proxying
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Nginx-Proxy true;
    proxy_redirect off;
    # TODO: does this cause not being http 1.3??
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    # TODO: differences between $connection_upgrade and ðŸ‘‡
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
    # TODO: or $server_port ðŸ‘‡
    proxy_set_header X-Forwarded-Proto $scheme;
    # TODO: DO I NEED THISðŸ‘‡!
    # proxy_set_header Forwarded         $proxy_add_forwarded;

    # TODO: DO I NEED THISðŸ‘‡!
    # Proxy SSL
    # proxy_ssl_server_name              on;

    # Proxy timeouts
    proxy_connect_timeout              5s;
    proxy_send_timeout                 5s;
    proxy_read_timeout                 5s;

  }

  root /var/www/html;
  index index.html index.htm index.nginx-debian.html;

  # gzip
  gzip            on;
  gzip_vary       on;
  gzip_proxied    any;
  gzip_comp_level 6;
  gzip_types      text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml;

}

server {
  # added this after setting the two required DNS {A,TXT} records for MTA-STS layer
  listen 443 ssl;
  listen [::]:443 ssl;
  http2 on;
  server_name mta-sts.baderidris.com mail.baderidris.com;

  server_tokens       off;

  ssl_certificate     /etc/letsencrypt/live/baderidris.com/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/baderidris.com/privkey.pem;
  # TODO: do I need this
  # ssl_trusted_certificate /etc/letsencrypt/live/baderidris.com/chain.pem;

  ssl_buffer_size     8k;

  ssl_dhparam         /etc/ssl/certs/dhparam.pem;

  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;

  ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';

  ssl_ecdh_curve secp384r1;
  ssl_session_tickets off;

  ssl_stapling on;
  ssl_stapling_verify on;
  resolver 8.8.8.8;

  # Aggressive Rate Limiting
  limit_req zone=limitreq burst=5 nodelay;
  limit_conn connlimit 5;

  location =/.well-known/mta-sts.txt {
    # bound in the compose file nginx service
    root /var/www/html/;
    limit_req zone=limitreq burst=3 nodelay;
  }

  # Catch-all to prevent 404s on this server block
  location / {
    return 204;
  }
}
# docs: https://www.digitalocean.com/community/tutorials/how-to-secure-a-containerized-node-js-application-with-nginx-let-s-encrypt-and-docker-compose#step-5-modifying-the-web-server-configuration-and-service-definition

# To prevent all non-existing domains use, it throws ERR_SSL_UNRECOGNIZED_NAME_ALERT to unwanted domains!
server {
  listen 80 default_server;
  listen [::]:80 default_server;

  listen 443 ssl default_server;
  listen [::]:443 ssl default_server;
  ssl_reject_handshake on;

  server_name _;
  return 444;
}