server {
  # TODO: docker compose -f ./b.prod-certbot.yml kill -s SIGHUP nginx is great to modify the config of nginx immediately instead of redeploying the container
  # ? old fashion was to use:  docker compose -f ./b.prod-certbot.yml up -d --build nginx --no-deps --force-recreate
  # ? which is only required if changing the compose files themselves and their binding
  listen 80;
  listen [::]:80;

  root /var/www/html;
  index index.html index.htm index.nginx-debian.html;

  server_name baderidris.com www.baderidris.com;

    # Static assets caching
    location ~* \.(?:css(\.map)?|js(\.map)?|jpg|jpeg|png|gif|ico|cur|svg|webp|ttf|woff2?)$ {
        expires 7d;
        add_header Cache-Control "public, must-revalidate";
        access_log off;
    }

  # error_page 404 /;
  location / {
    try_files $uri $uri/ /index.html;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Nginx-Proxy true;
    proxy_redirect off;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_pass http://app:3000;
    # add_header Content-Security-Policy "default-src 'self' 'unsafe-eval' 'unsafe-inline' http: https: ws: wss: blob: data:; img-src 'self' https://*.githubusercontent.com data:; frame-ancestors 'self';" always;

    # Adjust Content-Security-Policy for APIs
    add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' https: http: data:; img-src * data:; connect-src *; frame-ancestors 'self';" always;

    # Enable CORS for APIs if needed
    add_header Access-Control-Allow-Origin "*";
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
    add_header Access-Control-Allow-Headers "Content-Type, Authorization";

  }

  location ~ /.well-known/acme-challenge {
    allow all;
    root /var/www/html;
  }
  
  # gzip
  gzip            on;
  gzip_vary       on;
  gzip_proxied    any;
  gzip_comp_level 6;
  gzip_types      text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml;

  # error_page 404 /404.html;
  # location = /404.html {
  #     root /var/www/html;
  # }
}